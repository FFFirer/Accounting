@implements IDisposable

@inject NavigationManager NavigationManager

<div class="dropdown dropdown-end">
  <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
    <div class="w-6 rounded-full">
      <img alt="Tailwind CSS Navbar component"
        src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
    </div>
  </div>
  <ul tabindex="0" class="menu menu-sm dropdown-content bg-base-100 rounded-box z-1 mt-3 w-52 p-2 shadow">
    @foreach (var nav in NavModels)
    {
      <li>
        @if (nav.clientNav)
        {
          <NavLink href="@nav.Path" tabindex="-1" data-enhance-nav="false" data-not-solid="true"
            data-active-class="menu-active" ActiveClass="menu-active">@nav.Name</NavLink>
        }
        else
        {
          <NavLink href="@nav.Path" ActiveClass="active" class="justify-between">
            @nav.Name
          </NavLink>
        }
      </li>
    }
    <li>
      <form method="post" action="/Account/Logout">
        <AntiforgeryToken></AntiforgeryToken>
        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
        <button type="submit" class="dropdown-item">退出登录</button>
      </form>
    </li>
  </ul>
</div>

@code {

  private string? currentUrl;

  static NavModel[] NavModels = [new("/Profile", "Profile"), new("/Settings",
"Settings"),new("/Files","Files"),new("/app/Tasks", "Tasks", true)];

  protected override void OnInitialized()
  {
    currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    NavigationManager.LocationChanged += OnLocationChanged;

    Console.WriteLine("Avatar initialized");
  }

  private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
  {
    currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
    StateHasChanged();
  }

  public void Dispose()
  {
    NavigationManager.LocationChanged -= OnLocationChanged;
  }
}