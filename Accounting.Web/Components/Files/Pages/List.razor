@page "/Files"
@using Accounting.Data
@using Accounting.FileStorage
@using System.Linq.Dynamic.Core
@using Microsoft.EntityFrameworkCore

@implements IAsyncDisposable

@inject IFileStorageStore FileStorageStore

<div class="size-full flex flex-1 flex-col">
    <div class="flex flex-row mb-2 gap-2">
        <InputText class="input grow" placeholder="File Id..." @bind-Value="FileId" @bind:event="input"></InputText>
        <InputText class="input grow" placeholder="File Name..." @bind-Value="FileName" @bind:event="input"></InputText>
        <InputText class="input grow" placeholder="Bucket Name..." @bind-Value="BucketName" @bind:event="input">
        </InputText>

        <button type="button" class="btn btn-primary" @onclick="UpdateFilter">
            <SearchIcon></SearchIcon>
            查询
        </button>
        <NavLink href="/Files/Upload" class="btn">
            <FileUpIcon />
            上传
        </NavLink>
    </div>
    <div class="grow overflow-x-auto rounded-box border border-base-content/5 bg-base-100">
        <QuickGrid class="table" RowClass="GetRowClass" TGridItem="FileInformation" ItemsProvider="GetFiles">
            <TemplateColumn Context="file" Title="File">
                <div class="font-bold">@file.OriginalFileName</div>
                <div class="text-sm opacity-50">@file.Id</div>
            </TemplateColumn>
            <TemplateColumn class="text-nowrap" Context="file" Title="Tags">
                @if (file.Tags != null && file.Tags.Count > 0)
                {
                    foreach (var tag in file.Tags)
                    {
                        <span class="badge badge-sm">@tag</span>
                    }
                }
            </TemplateColumn>
            <TemplateColumn class="text-nowrap" Context="file" Title="Bucket">
                @file.Bucket?.Name
            </TemplateColumn>
            <PropertyColumn class="text-nowrap" Property="@(p => p.CreatedTime)" Format="yyyy-MM-dd HH:mm:ss">
            </PropertyColumn>
            <PropertyColumn class="text-nowrap" Property="@(p => p.ExpirationTime)" Format="yyyy-MM-dd HH:mm:ss">
            </PropertyColumn>
            @* <PropertyColumn class="text-nowrap" Property="@(p => p.Deleted)"></PropertyColumn> *@
            <TemplateColumn Context="file" Title="Deleted">
                <span class="text-nowrap">
                    @(file.Deleted ? "YES" : "No")
                </span>
            </TemplateColumn>
        </QuickGrid>
    </div>
    <Paginator State="pagination" />
</div>

@code {
    private string? FileId { get; set; }
    private string? FileName { get; set; }
    private string? BucketName { get; set; }

    private FileInfomationQueryFilter Filter { get; set; } = new() { IncludeBucket = true };

    private string GetRowClass(FileInformation file)=> "hover:bg-base-300";

    private void UpdateFilter()
    {
        Filter = new FileInfomationQueryFilter
        {
            FileId = FileId,
            FileName = FileName,
            BucketName = BucketName,
            IncludeBucket = true
        };
    }

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    public async ValueTask<GridItemsProviderResult<FileInformation>> GetFiles(GridItemsProviderRequest<FileInformation>
    request)
    {

        var result = await FileStorageStore.ExecutePageAsync(Filter, new PageQuery(pagination.CurrentPageIndex,
        pagination.ItemsPerPage)
        );

        return new GridItemsProviderResult<FileInformation>
        {
            Items = result.Datas,
            TotalItemCount = result.TotalCount
        };
    }


    public async ValueTask DisposeAsync() => await FileStorageStore.DisposeAsync();
}