@page "/Files/Upload"
@attribute [Authorize]
@rendermode InteractiveServer

@using Accounting.FileStorage
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc
@using Microsoft.Extensions.Options
@using System.ComponentModel.DataAnnotations

@inject IOptions<FileStorageOptions> Options
@inject IFileUploadService FileUploadService

<PageTitle>Upload</PageTitle>

<Alert Message="@Message" />

<fieldset class="fieldset mb-3">
    <legend class="fieldset-legend">Upload to:</legend>
    <InputText class="input w-full" id="Input.BucketName" placeholder="Bucket name..." @bind-Value="Input.BucketName" />
</fieldset>
<fieldset class="fieldset mb-3">
    <legend class="fieldset-legend">Pick a file</legend>
    <InputFile class="file-input w-full" id="Input.File" OnChange="FileChanged" />
    <label class="fieldset-label">文件大小不超过 @PrettySize</label>
</fieldset>

<button type="button" class="btn btn-primary" @onclick="UploadFile">上传</button>
<NavLink class="btn btn-link" href="/Files">查看所有文件</NavLink>

@code {
    static UploadModelValidator Validator = new UploadModelValidator();
    protected string? Message { get; set; }

    public string PrettySize => Accounting.Common.DisplayHelper.PrettySizeDisplay(Options.Value.MaxFileSize);

    [CascadingParameter]
    protected HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private UploadModel Input { get; set; } = new();

    public async Task UploadFile()
    {
        var validationResult = Validator.Validate(this.Input);

        if (validationResult.IsValid == false)
        {
            Message = "Error: " + string.Join(";", validationResult.Errors.Select(x => x.ErrorMessage));
            return;
        }

        var token = await FileUploadService.GetUploadTokenAsync(this.Input.BucketName, default);
        var result = await FileUploadService.UploadAsync(token, Input.File!.Name, Input.File, null);

        if (result.Succeeded) { Message = "上传成功"; return; }

        Message = "Error: " + result.ToString();
        Input.File = null;

    }

    private Task FileChanged(InputFileChangeEventArgs e)
    {
        Input.File = e.File;

        return Task.CompletedTask;
    }

    private class UploadModel
    {
        [Required(AllowEmptyStrings = false)]
        public string? BucketName { get; set; } = "Default";

        [Display(Name = "文件")]
        [Required]
        public IBrowserFile? File { get; set; }
    }

    private class UploadModelValidator : AbstractValidator<UploadModel>
    {
        public UploadModelValidator()
        {
            RuleFor(x => x.BucketName)
                .NotEmpty()
                .Must(x => x?.StartsWith('/') == false).WithMessage("不能以'/'开头");

            RuleFor(x => x.File).NotEmpty(); 
        }
    }
}