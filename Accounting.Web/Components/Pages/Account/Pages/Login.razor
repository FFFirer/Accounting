@page "/Account/Login"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject UserManager<User> userManager
@inject SignInManager<User> signInManager
@inject ILogger<Login> logger;

<div class="flex size-full flex-1 flex-col items-center justify-center">
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <fieldset class="fieldset bg-base-200 border-base-300 rounded-box w-xs border p-4">
            <legend class="fieldset-legend">Login</legend>

            <label class="fieldset-label">Email</label>
            <InputText @bind-Value="Input.Email" id="Input.Email" class="input" placeholder="Email address" />
            <ValidationMessage For="() => Input.Email" class="text-danger" />

            <label class="fieldset-label">Password</label>
            <InputText @bind-Value="Input.Password" id="Input.Password" class="input" type="password" autocomplete="current-password" placeholder="Password" />
            <ValidationMessage For="() => Input.Password" class="text-danger" />

            <label class="fieldset-label">
                <InputCheckbox class="checkbox" @bind-Value="Input.RememberMe" id="Input.RememberMe" />
                Remember me
            </label>

            <button type="submit" class="btn btn-block btn-primary mt-3">Log in</button>
        </fieldset>
    </EditForm>

    <div class="flex justify-between">
        <NavLink href="/Account/Register" class="btn btn-link">Register</NavLink>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    public Task LoginUser()
    {
        throw new NotImplementedException();
    }

    private class InputModel
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

