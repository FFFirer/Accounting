@page "/Account/Login"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<div class="flex size-full flex-1 flex-col items-center justify-center">

    <StatusMessage Message="@errorMessage" />
    
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <fieldset class="fieldset bg-base-200 border-base-300 rounded-box w-xs border p-4">
            <legend class="fieldset-legend">Login</legend>

            <label class="fieldset-label">Email</label>
            <InputText @bind-Value="Input.Email" id="Input.Email" class="input" placeholder="Email address" />
            <ValidationMessage For="() => Input.Email" class="text-danger" />

            <label class="fieldset-label">Password</label>
            <InputText @bind-Value="Input.Password" id="Input.Password" class="input" type="password"
                autocomplete="current-password" placeholder="Password" />
            <ValidationMessage For="() => Input.Password" class="text-danger" />

            <label class="fieldset-label">
                <InputCheckbox class="checkbox" @bind-Value="Input.RememberMe" id="Input.RememberMe" />
                Remember me
            </label>

            <button type="submit" class="btn btn-block btn-primary mt-3">Log in</button>
        </fieldset>
    </EditForm>

    <div class="flex justify-between">
        <NavLink href="/Account/Register" class="btn btn-link">Register</NavLink>
    </div>
</div>

@code {

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? RegisterUrl => $"Account/Register?ReturnUrl={ReturnUrl}";
    private string? ForgotPasswordUrl => $"Account/ForgotPassword?ReturnUrl={ReturnUrl}";

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email!, Input.Password!, Input.RememberMe, lockoutOnFailure:
        false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private class InputModel
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
