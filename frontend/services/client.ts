//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming 

import { HttpValidationProblemDetails, ProblemDetails } from "@frontend/utils/ProblemDetails";

export class JobDetailClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:7008";
    }

    getApiJobDetailQuery(page: number, size: number): Promise<PageListOfJobDetailDto> {
        let url_ = this.baseUrl + "/api/JobDetail/Query?";
        if (page === undefined || page === null)
            throw new Error("The parameter 'page' must be defined and cannot be null.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (size === undefined || size === null)
            throw new Error("The parameter 'size' must be defined and cannot be null.");
        else
            url_ += "size=" + encodeURIComponent("" + size) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiJobDetailQuery(_response);
        });
    }

    protected processGetApiJobDetailQuery(response: Response): Promise<PageListOfJobDetailDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageListOfJobDetailDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PageListOfJobDetailDto>(null as any);
    }
}

export class JobClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:7008";
    }

    getApiJobQuery(page: number, size: number): Promise<PageListOfJobDefinationDto> {
        let url_ = this.baseUrl + "/api/Job/Query?";
        if (page === undefined || page === null)
            throw new Error("The parameter 'page' must be defined and cannot be null.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (size === undefined || size === null)
            throw new Error("The parameter 'size' must be defined and cannot be null.");
        else
            url_ += "size=" + encodeURIComponent("" + size) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiJobQuery(_response);
        });
    }

    protected processGetApiJobQuery(response: Response): Promise<PageListOfJobDefinationDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageListOfJobDefinationDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PageListOfJobDefinationDto>(null as any);
    }
}

export class AccountClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:7008";
    }

    postAccountPerformExternalLogin(provider: string, returnUrl: string): Promise<void> {
        let url_ = this.baseUrl + "/Account/PerformExternalLogin?";
        if (provider === undefined || provider === null)
            throw new Error("The parameter 'provider' must be defined and cannot be null.");
        else
            url_ += "provider=" + encodeURIComponent("" + provider) + "&";
        if (returnUrl === undefined || returnUrl === null)
            throw new Error("The parameter 'returnUrl' must be defined and cannot be null.");
        else
            url_ += "returnUrl=" + encodeURIComponent("" + returnUrl) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostAccountPerformExternalLogin(_response);
        });
    }

    protected processPostAccountPerformExternalLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postAccountLogout(returnUrl: string): Promise<void> {
        let url_ = this.baseUrl + "/Account/Logout?";
        if (returnUrl === undefined || returnUrl === null)
            throw new Error("The parameter 'returnUrl' must be defined and cannot be null.");
        else
            url_ += "returnUrl=" + encodeURIComponent("" + returnUrl) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostAccountLogout(_response);
        });
    }

    protected processPostAccountLogout(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postAccountManageLinkExternalLogin(provider: string): Promise<void> {
        let url_ = this.baseUrl + "/Account/Manage/LinkExternalLogin?";
        if (provider === undefined || provider === null)
            throw new Error("The parameter 'provider' must be defined and cannot be null.");
        else
            url_ += "provider=" + encodeURIComponent("" + provider) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostAccountManageLinkExternalLogin(_response);
        });
    }

    protected processPostAccountManageLinkExternalLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postAccountManageDownloadPersonalData(): Promise<void> {
        let url_ = this.baseUrl + "/Account/Manage/DownloadPersonalData";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostAccountManageDownloadPersonalData(_response);
        });
    }

    protected processPostAccountManageDownloadPersonalData(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PageListOfJobDetailDto implements IPageListOfJobDetailDto {
    totalCount?: number;
    datas?: JobDetailDto[];

    constructor(data?: IPageListOfJobDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["datas"])) {
                this.datas = [] as any;
                for (let item of _data["datas"])
                    this.datas!.push(JobDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageListOfJobDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfJobDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.datas)) {
            data["datas"] = [];
            for (let item of this.datas)
                data["datas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageListOfJobDetailDto {
    totalCount?: number;
    datas?: JobDetailDto[];
}

export class JobDetailDto implements IJobDetailDto {
    schedulerName?: string | undefined;
    jobName?: string | undefined;
    jobGroup?: string | undefined;
    description?: string | undefined;
    jobClassName?: string | undefined;
    isDurable?: boolean;
    isNonConcurrent?: boolean;
    isUpdateData?: boolean;
    requestsRecovery?: boolean;

    constructor(data?: IJobDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.schedulerName = _data["schedulerName"];
            this.jobName = _data["jobName"];
            this.jobGroup = _data["jobGroup"];
            this.description = _data["description"];
            this.jobClassName = _data["jobClassName"];
            this.isDurable = _data["isDurable"];
            this.isNonConcurrent = _data["isNonConcurrent"];
            this.isUpdateData = _data["isUpdateData"];
            this.requestsRecovery = _data["requestsRecovery"];
        }
    }

    static fromJS(data: any): JobDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new JobDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schedulerName"] = this.schedulerName;
        data["jobName"] = this.jobName;
        data["jobGroup"] = this.jobGroup;
        data["description"] = this.description;
        data["jobClassName"] = this.jobClassName;
        data["isDurable"] = this.isDurable;
        data["isNonConcurrent"] = this.isNonConcurrent;
        data["isUpdateData"] = this.isUpdateData;
        data["requestsRecovery"] = this.requestsRecovery;
        return data;
    }
}

export interface IJobDetailDto {
    schedulerName?: string | undefined;
    jobName?: string | undefined;
    jobGroup?: string | undefined;
    description?: string | undefined;
    jobClassName?: string | undefined;
    isDurable?: boolean;
    isNonConcurrent?: boolean;
    isUpdateData?: boolean;
    requestsRecovery?: boolean;
}

export class PageListOfJobDefinationDto implements IPageListOfJobDefinationDto {
    totalCount?: number;
    datas?: JobDefinationDto[];

    constructor(data?: IPageListOfJobDefinationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["datas"])) {
                this.datas = [] as any;
                for (let item of _data["datas"])
                    this.datas!.push(JobDefinationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageListOfJobDefinationDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageListOfJobDefinationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.datas)) {
            data["datas"] = [];
            for (let item of this.datas)
                data["datas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageListOfJobDefinationDto {
    totalCount?: number;
    datas?: JobDefinationDto[];
}

export class JobDefinationDto implements IJobDefinationDto {
    namespace?: string | undefined;
    fullName?: string | undefined;

    constructor(data?: IJobDefinationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.namespace = _data["namespace"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): JobDefinationDto {
        data = typeof data === 'object' ? data : {};
        let result = new JobDefinationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["namespace"] = this.namespace;
        data["fullName"] = this.fullName;
        return data;
    }
}

export interface IJobDefinationDto {
    namespace?: string | undefined;
    fullName?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}